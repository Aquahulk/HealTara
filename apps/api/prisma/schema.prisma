generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                @id @default(autoincrement())
  email                  String             @unique
  password               String
  role                   String
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  managedDoctorProfileId Int?
  managedHospitalId      Int?
  canLogin               Boolean            @default(true)
  adminAuditLogs         AdminAuditLog[]
  doctorAppointments     Appointment[]      @relation("DoctorAppointments")
  patientAppointments    Appointment[]      @relation("PatientAppointments")
  doctorEngagements      DoctorEngagement[] @relation("UserDoctorEngagements")
  doctorProfile          DoctorProfile?     @relation("UserDoctorProfile")
  adminHospitals         Hospital[]         @relation("UserAdminHospitals")
  hospitalMemberships    HospitalDoctor[]   @relation("UserHospitalDoctor")
  doctorSlots            Slot[]             @relation("UserDoctorSlots")
  managedDoctorProfile   DoctorProfile?     @relation("UserManagedDoctorProfile", fields: [managedDoctorProfileId], references: [id])
  managedHospital        Hospital?          @relation("UserManagedHospital", fields: [managedHospitalId], references: [id])
}

model DoctorProfile {
  id                Int                  @id @default(autoincrement())
  userId            Int                  @unique
  specialization    String
  qualifications    String?
  experience        Int?
  clinicName        String?
  clinicAddress     String
  city              String?
  state             String?
  phone             String
  consultationFee   Int
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  slug              String?              @unique
  slotPeriodMinutes Int                  @default(15)
  micrositeEnabled  Boolean              @default(true)
  user              User                 @relation("UserDoctorProfile", fields: [userId], references: [id], onDelete: Cascade)
  timeOffs          DoctorTimeOff[]
  workingHours      DoctorWorkingHours[]
  slotAdmins        User[]               @relation("UserManagedDoctorProfile")
}

model DoctorTimeOff {
  id              Int           @id @default(autoincrement())
  doctorProfileId Int
  start           DateTime
  end             DateTime
  reason          String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  doctorProfile   DoctorProfile @relation(fields: [doctorProfileId], references: [id], onDelete: Cascade)
}

model DoctorWorkingHours {
  id              Int           @id @default(autoincrement())
  doctorProfileId Int
  dayOfWeek       Int
  startTime       String
  endTime         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  doctorProfile   DoctorProfile @relation(fields: [doctorProfileId], references: [id], onDelete: Cascade)

  @@unique([doctorProfileId, dayOfWeek])
}

model Appointment {
  id        Int      @id @default(autoincrement())
  date      DateTime
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctorId  Int
  patientId Int
  notes     String?
  time      String
  doctor    User     @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Cascade)
  patient   User     @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)

  @@index([doctorId, date, status])
  @@index([patientId, date])
  @@index([date, time])
}

model Hospital {
  id          Int              @id @default(autoincrement())
  name        String
  address     String?
  city        String?
  state       String?
  phone       String?
  profile     Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  adminId     Int?
  departments Department[]
  admin       User?            @relation("UserAdminHospitals", fields: [adminId], references: [id])
  doctors     HospitalDoctor[]
  slotAdmins  User[]           @relation("UserManagedHospital")
}

model Department {
  id          Int              @id @default(autoincrement())
  hospitalId  Int
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  hospital    Hospital         @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  doctors     HospitalDoctor[]
}

model HospitalDoctor {
  id           Int         @id @default(autoincrement())
  hospitalId   Int
  doctorId     Int
  departmentId Int?
  createdAt    DateTime    @default(now())
  department   Department? @relation(fields: [departmentId], references: [id])
  doctor       User        @relation("UserHospitalDoctor", fields: [doctorId], references: [id], onDelete: Cascade)
  hospital     Hospital    @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@unique([hospitalId, doctorId])
}

model Slot {
  id        Int      @id @default(autoincrement())
  doctorId  Int
  date      DateTime
  time      String
  status    String   @default("AVAILABLE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctor    User     @relation("UserDoctorSlots", fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, date, time])
  @@index([doctorId, date, status])
  @@index([date, status])
  @@index([status, time])
}

model AdminAuditLog {
  id         Int      @id @default(autoincrement())
  adminId    Int
  action     String
  entityType String
  entityId   Int?
  details    String?
  createdAt  DateTime @default(now())
  admin      User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model DoctorEngagement {
  id         Int      @id @default(autoincrement())
  doctorId   Int
  date       DateTime @default(now())
  cardViews  Int      @default(0)
  siteClicks Int      @default(0)
  bookClicks Int      @default(0)
  doctor     User     @relation("UserDoctorEngagements", fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, date])
}
